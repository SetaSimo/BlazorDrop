@page "/"
@using BlazorDrop.Components
@using BlazorDropTest
@using BlazorDropTest.Shared
@using BlazorDrop

<div class="container mt-4">

    <div class="row mb-4">
        <div class="col-md-6">
            <BlazorDropSelect T="KeyValuePair<Guid, string>"
                              DisplaySelector="@(x => x.Value)"
                              OnLoadItemsAsync="LoadPageAsync"
                              OnSearchTextChangedAsync="SearchForItemAsync"
                              OnItemClickAsync="OnValueChanged"
                              ShowLoadingIndicator="true"
                              Disabled="false"
                              Placeholder="Select value"
                              UpdateSearchDelayInMilliseconds="600"
                              PageSize="10"
                              ValueNotFoundMessageText="Not fount"
                              Class="active-select"
                              Id="select-enabled"
                              CurrentPage="@(0)"
                              Value="@_selectedItem" />

            @if (_selectedItem.Value != null)
            {
                <div class="mt-2 alert alert-success p-2">
                    <strong>Selected:</strong> @_selectedItem.Value
                </div>
            }
        </div>

        <div class="col-md-6">
            <BlazorDropSelect T="KeyValuePair<Guid, string>"
                              DisplaySelector="@(x => x.Value)"
                              OnLoadItemsAsync="LoadPageAsync"
                              OnSearchTextChangedAsync="SearchForItemAsync"
                              OnItemClickAsync="OnValueChanged"
                              ShowLoadingIndicator="true"
                              Disabled="true"
                              Placeholder="Disabled select"
                              UpdateSearchDelayInMilliseconds="600"
                              PageSize="10"
                              ValueNotFoundMessageText="Not fount"
                              Class="disabled-select"
                              Id="select-disabled"
                              CurrentPage="@(0)"
                              Value="@_selectedItemInDisabledSelect" />
        </div>
    </div>

@*     <div class="row">
        <div class="col-md-12">
            <label for="drop-list" class="form-label">List:</label>
            <BlazorDropList T="KeyValuePair<Guid, string>"
                            DisplaySelector="@(x => x.Value)"
                            OnLoadItemsAsync="LoadPageAsync"
                            OnItemClickAsync="OnValueChanged"
                            ShowLoadingIndicator="true"
                            PageSize="10"
                            ValueNotFoundMessageText="Not fount"
                            Class="drop-list"
                            Id="drop-list"
                            CurrentPage="@(0)"
                            Value="@_selectedItemInDisabledSelect">
            </BlazorDropList>
        </div>
    </div> *@

</div>

@if (_selectedItemInDisabledSelect.Value != null)
{
    <p>Selected: @_selectedItemInDisabledSelect.Value</p>
}

@code {
    private Dictionary<Guid, string> _testValues = new Dictionary<Guid, string>();
    private KeyValuePair<Guid, string> _selectedItem;
    private KeyValuePair<Guid, string> _selectedItemInDisabledSelect;

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < 1000; i++)
        {
            var id = Guid.NewGuid();
            _testValues.Add(id, $"Record {i}");
        }
    }

    private async Task<IEnumerable<KeyValuePair<Guid, string>>> LoadPageAsync(int page, int pageSize)
    {
        var skip = page * pageSize;
        var items = _testValues.Skip(skip).Take(pageSize);
        await Task.Delay(1000);
        return items;
    }

    private async Task<IEnumerable<KeyValuePair<Guid, string>>> SearchForItemAsync(string searchText)
    {
        var items = _testValues.Where(x => x.Value.Contains(searchText));
        await Task.Delay(1000);
        return items;
    }

    private async Task<KeyValuePair<Guid, string>> OnValueChanged(KeyValuePair<Guid, string> item)
    {
        await Task.Delay(1000);
        _selectedItem = item;
        StateHasChanged();
        return _selectedItem;
    }
}
