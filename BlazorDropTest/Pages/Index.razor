@page "/"
@using BlazorDrop.Components
@using BlazorDrop.Dto
@using BlazorDropTest
@using BlazorDropTest.Shared
@using BlazorDrop

<BlazorDropSelect T="KeyValuePair<Guid, string>"
                  DisplaySelector="@(x => x.Value)"
                  OnLoadItemsAsync="LoadPageAsync"
                  OnSearchAsync="SearchForItemAsync"
                  OnValueChangedAsync="OnValueChanged"
                  CanShowLoadingIndicator="true"
                  Disabled="false"
                  Placeholder="Select value"
                  UpdateSearchDelayInMilliseconds="600"
                  PageSize="10"
                  ValueNotFoundMessageText="Value not found"
                  Class="new-component-class"
                  Id="select-inside-page"
                  CurrentPage="@(0)"
                  Value="@_selectedItem" />

@if (_selectedItem.Value != null)
{
    <p>Selected: @_selectedItem.Value</p>
}

<BlazorDropSelect T="KeyValuePair<Guid, string>"
                  DisplaySelector="@(x => x.Value)"
                  OnLoadItemsAsync="LoadPageAsync"
                  OnSearchAsync="SearchForItemAsync"
                  OnValueChangedAsync="OnValueChanged"
                  CanShowLoadingIndicator="true"
                  Disabled="true"
                  Placeholder="Select value"
                  UpdateSearchDelayInMilliseconds="600"
                  PageSize="10"
                  ValueNotFoundMessageText="Value not found"
                  Class="new-component-class"
                  Id="select-inside-page"
                  CurrentPage="@(0)"
                  Value="@_selectedItemInDisabledSelect" />

<BlazorDropList T="KeyValuePair<Guid, string>"
                Value="_selectedListValue"
                OnItemClick="OnValueChanged"
                OnLoadItemsAsync="LoadPageAsync"
                ValueNotFoundMessageText="not found">

</BlazorDropList>

@if (_selectedItemInDisabledSelect.Value != null)
{
    <p>Selected: @_selectedItemInDisabledSelect.Value</p>
}

@code {
    private Dictionary<Guid, string> _testValues = new Dictionary<Guid, string>();
    private KeyValuePair<Guid, string> _selectedItem;
    private KeyValuePair<Guid, string> _selectedItemInDisabledSelect;

    private KeyValuePair<Guid, string> _selectedListValue;

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < 1000; i++)
        {
            var id = Guid.NewGuid();
            _testValues.Add(id, $"Record {i}");
        }
    }

    private async Task<IEnumerable<KeyValuePair<Guid, string>>> LoadPageAsync(int page, int pageSize)
    {
        var skip = page * pageSize;
        var items = _testValues.Skip(skip).Take(pageSize);
        await Task.Delay(1000);
        return items;
    }

    private async Task<IEnumerable<KeyValuePair<Guid, string>>> SearchForItemAsync(string searchText)
    {
        var items = _testValues.Where(x => x.Value.Contains(searchText));
        await Task.Delay(1000);
        return items;
    }

    private async Task<KeyValuePair<Guid, string>> OnValueChanged(KeyValuePair<Guid, string> item)
    {
        await Task.Delay(1000);
        _selectedItem = item;
        StateHasChanged();
        return _selectedItem;
    }
}
