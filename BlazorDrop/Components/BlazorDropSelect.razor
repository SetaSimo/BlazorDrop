@using BlazorDrop.Components.Base
@using BlazorDrop.Components.Loading
@typeparam T
@inherits BaseLazyLoadWithSelect<T>

<div id="@Id" class="lazy-load-select-main @Class">

    <div class="lazy-load-select-input-with-indication">
        <input id="@_inputSelectorId"
               placeholder="@Placeholder"
               class="lazy-load-select-input"
               disabled="@Disabled"
               readonly="@Disabled"
               @onclick="OpenDropdownAsync"
               @bind-value="@_searchText"
               @bind-value:event="oninput" />
        @if (_isLoading && CanShowLoadingIndicator)
        {
            <BlazorDropLoadingIndicator Id="@LoadingIndicatorId" Class="@LoadingIndicatorClass"></BlazorDropLoadingIndicator>
        }
    </div>
    @if (_isDropdownOpen)
    {
        <div class="lazy-load-select-items" id="@_scrollContainerId">
            @foreach (var item in Items)
            {
                <div class="@SelectableItemClass"
                     @onclick="async () => await HandleItemSelectedAsync(item)">
                    @GetDisplayValue(item)
                </div>
            }

            @if (Items.Count == 0)
            {
                <div class="lazy-load-no-items">
                    @ValueNotFoundMessageText
                </div>
            }
        </div>
    }
</div>
